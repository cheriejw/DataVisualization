#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('citrushacks:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var io = require('socket.io')(server);

/*** Socket IO ***/
io.on('connection', function(client){
  
  // client.emit('data', "from server");
  client.on('data', function(data){

    console.log('web send data: ' + data); 
  });


  client.on('requestWord', function(_data){
    var spawn = require("child_process").spawn;
    var process = spawn('python', ['public/dict.py', _data]);
    // process.stdout.on('data', function(_data){
    // });
    jsonContent = readLocalFile('words/'+_data+".json", function(_data){
      client.emit('data', _data);
    });

  });


  client.on('disconnect', function(){

  });

});

/************************************/
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function readLocalFile(_path, _callback){
  fs = require('fs')
  fs.readFile(_path, 'utf8', function(err, data){
    if(err){
      readLocalFile(_path);
      return console.log(err);
    }
    // console.log(data);
    _callback(data);
  });
  
}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


